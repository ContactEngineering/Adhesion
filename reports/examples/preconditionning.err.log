Traceback (most recent call last):
  File "/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
gtol = 1e-5
n = 128

w = 0.05
interaction_range = 1

topography = fourier_synthesis(
    (n, n),
    (n, n),
    hurst=0.8,
    rms_slope=0.1,
    short_cutoff=8,
    long_cutoff=n/2,
)
topography = topography.scale(hprms / topography.rms_gradient()).squeeze()
topography._heights = topography.heights() - np.max(topography.heights())

print(np.max(topography.heights()))

substrate = PeriodicFFTElasticHalfSpace(
    (n,n), Es, physical_sizes=(n,n),
    fft='serial')

interaction = RepulsiveExponential(100 * w, 0.001 * interaction_range, w, interaction_range).linearize_core(hardness=1000)

system = SmoothContactSystem(substrate, interaction, topography)

# TODO: This should probably end up as a method of the system
def fix_mw_sol(x):

    var = x.copy()
    K = np.sqrt(system.stiffness_k.reshape(np.shape(x)) * system.area_per_pt)
    _fourier_sol_mw = var / K
    fourier_sol_MW = fix_fourier_sol(_fourier_sol_mw)
    return fourier_sol_MW

def fix_fourier_sol(x):
    var = x.copy()
    fourier_buffer.array()[...] = var.reshape(system.nb_grid_pts)
    engine.ihcfft(fourier_buffer,real_buffer)
    real_sol = real_buffer.array()[...].copy()*engine.normalisation
    return real_sol


max_stress = np.max(abs(system.interaction.max_tensile))
topography = system.surface
nx, ny = system.nb_grid_pts
sx, sy = topography.physical_sizes


typical_stress_rep = hprms * Es
typical_stress_adh = abs(system.interaction.max_tensile) #w / system.interaction.rho
typical_stress = max(typical_stress_rep, typical_stress_adh)

gtol_per_pixel = gtol * topography.area_per_pt #* typical_stress

offset_temp = 1 * system.surface.rms_height_from_area()

init_disp = np.zeros(system.substrate.nb_subdomain_grid_pts)

engine = muFFT.FFT(system.substrate.nb_grid_pts, fft='fftw',
                   allow_temporary_buffer=False,
                   allow_destroy_input=True)

real_buffer = engine.register_halfcomplex_field("real-space", 1)
fourier_buffer = engine.register_halfcomplex_field("fourier-space", 1)
real_buffer.array()[...] = init_disp
engine.hcfft(real_buffer, fourier_buffer)
k_float_disp = fourier_buffer.array()[...].copy()
k_float_disp_mw = k_float_disp * np.sqrt(system.stiffness_k)



print('############# PRECONDITIONED LBFGS RUNNING #######################')

sol = scipy.optimize.minimize(
    system.preconditioned_objective(offset_temp,gradient=True,
                           logger=Logger("evaluations_mwlbfgs.log")),
x0=k_float_disp_mw,
method='L-BFGS-B', jac=True, bounds=None,
options=dict(gtol=gtol_per_pixel,
             ftol=0, maxcor=3,
             maxiter=100000,
             maxfun=300000,
             ),
            )

print(sol.message)
print(sol.nit)
#assert sol.success

#_dump(system, offset_temp, sol)

disps = fix_mw_sol(sol.x)

gap = system.compute_gap(disps, offset_temp)
plt.figure()
plt.colorbar(plt.imshow(gap), label="gap")

print('################## LBFGS REAL RUNNING ############################')

sol = scipy.optimize.minimize(system.objective(offset_temp, gradient=True,
                                logger=Logger("evaluations_lbfgs.log")),
    x0=init_disp,
    method='L-BFGS-B', jac=True, bounds=None,
    options=dict(gtol=gtol_per_pixel,
                 ftol=0, maxcor=3,
                 maxiter=100000,
                 maxfun=300000,
                 ),
)

print(sol.message)
print(sol.nit)
#assert sol.success

#_dump_lbfgs(system, offset_temp, sol)
disps = sol.x.reshape((n,n))

gap = system.compute_gap(disps, offset_temp)
plt.figure()
plt.colorbar(plt.imshow(gap))

print('################## LBFGS HC-FOURIER RUNNING ############################')

sol = scipy.optimize.minimize(system.objective_k_float(offset_temp,
                                                       gradient=True,
                        logger=Logger("evaluations_lbfgs_fourier.log")),
                              x0=k_float_disp,
                              method='L-BFGS-B', jac=True, bounds=None,
                              options=dict(gtol=gtol_per_pixel,
                                           ftol=0, maxcor=3,
                                           maxiter=100000,
                                           maxfun=300000,
                                           ),
                              )

print(sol.message)
print(sol.nit)

#assert sol.success
disps = fix_fourier_sol(sol.x)

gap = system.compute_gap(disps, offset_temp)
plt.figure()
plt.colorbar(plt.imshow(gap))
------------------

----- stdout -----
0.0
----- stderr -----
/home/runner/work/Adhesion/venv/lib/python3.12/site-packages/Adhesion/Interactions/Exponential.py:218: RuntimeWarning: overflow encountered in exp
  V_rep = gam_rep * np.exp(g_rep)
------------------

[31m---------------------------------------------------------------------------[39m
[31mTypeError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[3][39m[32m, line 61[39m
[32m     57[39m offset_temp = [32m1[39m * system.surface.rms_height_from_area()
[32m     59[39m init_disp = np.zeros(system.substrate.nb_subdomain_grid_pts)
[32m---> [39m[32m61[39m engine = [43mmuFFT[49m[43m.[49m[43mFFT[49m[43m([49m[43msystem[49m[43m.[49m[43msubstrate[49m[43m.[49m[43mnb_grid_pts[49m[43m,[49m[43m [49m[43mfft[49m[43m=[49m[33;43m'[39;49m[33;43mfftw[39;49m[33;43m'[39;49m[43m,[49m
[32m     62[39m [43m                   [49m[43mallow_temporary_buffer[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[32m     63[39m [43m                   [49m[43mallow_destroy_input[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[32m     65[39m real_buffer = engine.register_halfcomplex_field([33m"[39m[33mreal-space[39m[33m"[39m, [32m1[39m)
[32m     66[39m fourier_buffer = engine.register_halfcomplex_field([33m"[39m[33mfourier-space[39m[33m"[39m, [32m1[39m)

[36mFile [39m[32m~/work/Adhesion/venv/lib/python3.12/site-packages/muFFT/__init__.py:190[39m, in [36mFFT[39m[34m(nb_grid_pts, engine, communicator, **kwargs)[39m
[32m    167[39m [38;5;250m[39m[33;03m"""[39;00m
[32m    168[39m [33;03mThe FFT class handles forward and inverse transforms and instantiates[39;00m
[32m    169[39m [33;03mthe correct engine object to carry out the transform.[39;00m
[32m   (...)[39m[32m    187[39m [33;03m    Default: None[39;00m
[32m    188[39m [33;03m"""[39;00m
[32m    189[39m factory, communicator = get_engine_factory(engine, communicator)
[32m--> [39m[32m190[39m [38;5;28;01mreturn[39;00m [43mfactory[49m[43m([49m[43mnb_grid_pts[49m[43m,[49m[43m [49m[43mcommunicator[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[31mTypeError[39m: __init__(): incompatible constructor arguments. The following argument types are supported:
    1. _muFFT.PocketFFT(nb_grid_pts: List[int], communicator: _muGrid.Communicator = <_muGrid.Communicator object at 0x7fa0499106f0>, flags: _muFFT.FFT_PlanFlags = <FFT_PlanFlags.estimate: 0>, allow_temporary_buffer: bool = True, allow_destroy_input: bool = False)

Invoked with: (128, 128), <_muGrid.Communicator object at 0x7fa048bf4930>; kwargs: fft='fftw', allow_temporary_buffer=False, allow_destroy_input=True

