Traceback (most recent call last):
  File "/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
gtol = 1e-5
n = 128

w = 0.05
interaction_range = 1

topography = fourier_synthesis(
    (n, n),
    (n, n),
    hurst=0.8,
    rms_slope=0.1,
    short_cutoff=8,
    long_cutoff=n/2,
)
topography = topography.scale(hprms / topography.rms_gradient()).squeeze()
topography._heights = topography.heights() - np.max(topography.heights())

print(np.max(topography.heights()))

substrate = PeriodicFFTElasticHalfSpace(
    (n,n), Es, physical_sizes=(n,n),
    fft='serial')

interaction = RepulsiveExponential(100 * w, 0.001 * interaction_range, w, interaction_range).linearize_core(hardness=1000)

system = SmoothContactSystem(substrate, interaction, topography)

# TODO: This should probably end up as a method of the system
def fix_mw_sol(x):

    var = x.copy()
    K = np.sqrt(system.stiffness_k.reshape(np.shape(x)) * system.area_per_pt)
    _fourier_sol_mw = var / K
    fourier_sol_MW = fix_fourier_sol(_fourier_sol_mw)
    return fourier_sol_MW

def fix_fourier_sol(x):
    var = x.copy()
    fourier_buffer.array()[...] = var.reshape(system.nb_grid_pts)
    engine.ihcfft(fourier_buffer,real_buffer)
    real_sol = real_buffer.array()[...].copy()*engine.normalisation
    return real_sol


max_stress = np.max(abs(system.interaction.max_tensile))
topography = system.surface
nx, ny = system.nb_grid_pts
sx, sy = topography.physical_sizes


typical_stress_rep = hprms * Es
typical_stress_adh = abs(system.interaction.max_tensile) #w / system.interaction.rho
typical_stress = max(typical_stress_rep, typical_stress_adh)

gtol_per_pixel = gtol * topography.area_per_pt #* typical_stress

offset_temp = 1 * system.surface.rms_height_from_area()

init_disp = np.zeros(system.substrate.nb_subdomain_grid_pts)

engine = muFFT.FFT(system.substrate.nb_grid_pts, fft='fftw',
                   allow_temporary_buffer=False,
                   allow_destroy_input=True)

real_buffer = engine.register_halfcomplex_field("real-space", 1)
fourier_buffer = engine.register_halfcomplex_field("fourier-space", 1)
real_buffer.array()[...] = init_disp
engine.hcfft(real_buffer, fourier_buffer)
k_float_disp = fourier_buffer.array()[...].copy()
k_float_disp_mw = k_float_disp * np.sqrt(system.stiffness_k)



print('############# PRECONDITIONED LBFGS RUNNING #######################')

sol = scipy.optimize.minimize(
    system.preconditioned_objective(offset_temp,gradient=True,
                           logger=Logger("evaluations_mwlbfgs.log")),
x0=k_float_disp_mw,
method='L-BFGS-B', jac=True, bounds=None,
options=dict(gtol=gtol_per_pixel,
             ftol=0, maxcor=3,
             maxiter=100000,
             maxfun=300000,
             ),
            )

print(sol.message)
print(sol.nit)
#assert sol.success

#_dump(system, offset_temp, sol)

disps = fix_mw_sol(sol.x)

gap = system.compute_gap(disps, offset_temp)
plt.figure()
plt.colorbar(plt.imshow(gap), label="gap")

print('################## LBFGS REAL RUNNING ############################')

sol = scipy.optimize.minimize(system.objective(offset_temp, gradient=True,
                                logger=Logger("evaluations_lbfgs.log")),
    x0=init_disp,
    method='L-BFGS-B', jac=True, bounds=None,
    options=dict(gtol=gtol_per_pixel,
                 ftol=0, maxcor=3,
                 maxiter=100000,
                 maxfun=300000,
                 ),
)

print(sol.message)
print(sol.nit)
#assert sol.success

#_dump_lbfgs(system, offset_temp, sol)
disps = sol.x.reshape((n,n))

gap = system.compute_gap(disps, offset_temp)
plt.figure()
plt.colorbar(plt.imshow(gap))

print('################## LBFGS HC-FOURIER RUNNING ############################')

sol = scipy.optimize.minimize(system.objective_k_float(offset_temp,
                                                       gradient=True,
                        logger=Logger("evaluations_lbfgs_fourier.log")),
                              x0=k_float_disp,
                              method='L-BFGS-B', jac=True, bounds=None,
                              options=dict(gtol=gtol_per_pixel,
                                           ftol=0, maxcor=3,
                                           maxiter=100000,
                                           maxfun=300000,
                                           ),
                              )

print(sol.message)
print(sol.nit)

#assert sol.success
disps = fix_fourier_sol(sol.x)

gap = system.compute_gap(disps, offset_temp)
plt.figure()
plt.colorbar(plt.imshow(gap))
------------------

----- stderr -----
/home/runner/work/Adhesion/venv/lib/python3.8/site-packages/Adhesion/Interactions/Exponential.py:218: RuntimeWarning: overflow encountered in exp
  V_rep = gam_rep * np.exp(g_rep)
----- stdout -----
0.0
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[3], line 26[0m
[1;32m     20[0m substrate [38;5;241m=[39m PeriodicFFTElasticHalfSpace(
[1;32m     21[0m     (n,n), Es, physical_sizes[38;5;241m=[39m(n,n),
[1;32m     22[0m     fft[38;5;241m=[39m[38;5;124m'[39m[38;5;124mserial[39m[38;5;124m'[39m)
[1;32m     24[0m interaction [38;5;241m=[39m RepulsiveExponential([38;5;241m100[39m [38;5;241m*[39m w, [38;5;241m0.001[39m [38;5;241m*[39m interaction_range, w, interaction_range)[38;5;241m.[39mlinearize_core(hardness[38;5;241m=[39m[38;5;241m1000[39m)
[0;32m---> 26[0m system [38;5;241m=[39m [43mSmoothContactSystem[49m[43m([49m[43msubstrate[49m[43m,[49m[43m [49m[43minteraction[49m[43m,[49m[43m [49m[43mtopography[49m[43m)[49m
[1;32m     28[0m [38;5;66;03m# TODO: This should probably end up as a method of the system[39;00m
[1;32m     29[0m [38;5;28;01mdef[39;00m [38;5;21mfix_mw_sol[39m(x):

File [0;32m~/work/Adhesion/venv/lib/python3.8/site-packages/Adhesion/System/Systems.py:82[0m, in [0;36mSmoothContactSystem.__init__[0;34m(self, substrate, interaction, surface)[0m
[1;32m     77[0m [38;5;28mself[39m[38;5;241m.[39mengine [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39msubstrate[38;5;241m.[39mfftengine
[1;32m     79[0m [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(substrate[38;5;241m.[39mfftengine, [38;5;124m"[39m[38;5;124mregister_halfcomplex_field[39m[38;5;124m"[39m) [38;5;129;01mand[39;00m [38;5;28mself[39m[38;5;241m.[39mengine[38;5;241m.[39mcommunicator[38;5;241m.[39msize [38;5;241m==[39m [38;5;241m1[39m:
[1;32m     80[0m     [38;5;66;03m# avoids the initialization to fail if we use an fftengine without these hcffts implemnented[39;00m
[1;32m     81[0m     [38;5;66;03m# preconditionning is not parallelized yet, this we have no parallelized wrapper for hcfft in muFFT yet[39;00m
[0;32m---> 82[0m     [38;5;28mself[39m[38;5;241m.[39mreal_buffer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mengine[49m[38;5;241;43m.[39;49m[43mfetch_or_register_halfcomplex_field[49m([38;5;124m"[39m[38;5;124mhc-real-space[39m[38;5;124m"[39m, [38;5;241m1[39m)
[1;32m     83[0m     [38;5;28mself[39m[38;5;241m.[39mfourier_buffer [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mengine[38;5;241m.[39mfetch_or_register_halfcomplex_field([38;5;124m"[39m[38;5;124mhc-fourier-space[39m[38;5;124m"[39m, [38;5;241m1[39m)
[1;32m     85[0m     [38;5;28mself[39m[38;5;241m.[39mstiffness_k [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_compute_stiffness_k()

[0;31mAttributeError[0m: '_muFFT.PocketFFT' object has no attribute 'fetch_or_register_halfcomplex_field'

